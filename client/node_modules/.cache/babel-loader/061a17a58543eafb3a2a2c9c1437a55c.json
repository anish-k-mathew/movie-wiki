{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/anish.k.mathew/workspace/personal/movie-wiki/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/anish.k.mathew/workspace/personal/movie-wiki/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/anish.k.mathew/workspace/personal/movie-wiki/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/anish.k.mathew/workspace/personal/movie-wiki/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar request = require('superagent');\n\nvar endpoints = require('./lib/endpoints');\n\nvar limits = require('limits.js');\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function _class(apiKey) {\n    var _this = this;\n\n    var useDefaultLimits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var baseUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'https://api.themoviedb.org/3/';\n\n    _classCallCheck(this, _class);\n\n    if (!apiKey) {\n      throw new Error('Bad api key');\n    }\n\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n\n    if (useDefaultLimits) {\n      this.throttle = limits().within(10 * 1000, 39);\n    } // Create the dynamic api methods using the configuration found in lib/endpoints\n\n\n    Object.keys(endpoints.methods).forEach(function (method) {\n      var met = endpoints.methods[method];\n      Object.keys(met).forEach(function (m) {\n        _this[method + m] =\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var params,\n              options,\n              _args = arguments;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                  options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n                  if (!(!_this.token || Date.now() > +new Date(_this.token.expires_at))) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return _this.requestToken();\n\n                case 5:\n                  return _context.abrupt(\"return\", _this.makeRequest(met[m].method, params, met[m].resource, options));\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      });\n    });\n  }\n  /**\n   * Gets an api token using an api key\n   *\n   * @returns {Promise}\n   */\n\n\n  _createClass(_class, [{\n    key: \"requestToken\",\n    value: function () {\n      var _requestToken = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.makeRequest('get', {}, endpoints.authentication.requestToken);\n\n              case 2:\n                res = _context2.sent;\n                this.token = res;\n                return _context2.abrupt(\"return\", this.token.request_token);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function requestToken() {\n        return _requestToken.apply(this, arguments);\n      }\n\n      return requestToken;\n    }()\n    /**\n     * Gets the session id\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"session\",\n    value: function () {\n      var _session = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.makeRequest('get', {\n                  request_token: this.token.request_token\n                }, endpoints.authentication.session);\n\n              case 2:\n                res = _context3.sent;\n                this.sessionId = res.session_id;\n                return _context3.abrupt(\"return\", this.sessionId);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function session() {\n        return _session.apply(this, arguments);\n      }\n\n      return session;\n    }()\n    /**\n     * Makes the request to the api using the configuration from lib/endpoints\n     *\n     * @param {String} type The http verb\n     * @param {Object} params The parameters to pass to the api\n     * @param {String} endpoint The api endpoint relative to the base url\n     * @param {String|Object} options If a string, then assumed to be append_to_response. If Object, then options object\n     * @param {String} options.append_to_response additional argument for the TMDB api's append_to_response query parameter\n     * @param {timeout} options.timeout superagent timeout object for request\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(type, params, endpoint, options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        // Interpret options\n        var _ref2 = typeof options === 'string' || options instanceof String ? {\n          append_to_response: options\n        } : options || '',\n            appendToResponse = _ref2.append_to_response,\n            timeout = _ref2.timeout; // Some endpoints have an optional account_id parameter (when there's a session).\n        // If it's not included, assume we want the current user's id,\n        // which is setting it to '{account_id}'\n\n\n        if (endpoint.indexOf(':id') !== -1 && params === {} && _this2.sessionId) {\n          params.id = '{account_id}';\n        } // Check params to see if params an object\n        // and if there is only one parameter in the endpoint\n\n\n        if (typeof params !== 'object' && endpoint.split(':').length === 2) {\n          var parts = endpoint.split(':');\n          var index = parts[1].indexOf('/');\n          endpoint = parts[0] + params + (index === -1 ? '' : parts[1].substr(index));\n        } // Iterate the keys of params and replace the endpoint sections\n\n\n        if (typeof params === 'object') {\n          Object.keys(params).forEach(function (key) {\n            endpoint = endpoint.replace(\":\".concat(key), params[key]);\n          });\n        }\n\n        type = type.toUpperCase();\n        var req = request(type, _this2.baseUrl + endpoint);\n\n        if (_this2.apiKey) {\n          req.query({\n            api_key: _this2.apiKey\n          });\n        }\n\n        if (_this2.sessionId) {\n          req.query({\n            session_id: _this2.sessionId\n          });\n        }\n\n        if (appendToResponse) {\n          req.query({\n            append_to_response: appendToResponse\n          });\n        }\n\n        if (timeout) {\n          req.timeout(timeout);\n        }\n\n        req[type === 'GET' ? 'query' : 'send'](params);\n\n        var requestHandler = function requestHandler() {\n          req.end(function (err, res) {\n            if (err) {\n              return reject(err);\n            }\n\n            resolve(res.body, res);\n          });\n        };\n\n        if (_this2.throttle) {\n          _this2.throttle.push(requestHandler);\n        } else {\n          requestHandler();\n        }\n      });\n    }\n  }]);\n\n  return _class;\n}();","map":null,"metadata":{},"sourceType":"script"}